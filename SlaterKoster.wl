(* ::Package:: *)

(* ::Input:: *)
(*Clear["SKpara"]*)
(*(*===============================================================\[Equal]*)*)
(*(*Author: Jiayu Li@SUSTech*)*)
(*(*Email: lijy7@mail.sustech.edu.cn*)*)
(*(*Website: Qihang Liu's group, https://liuqh.phy.sustech.edu.cn/*)*)
(*(*===============================================================\[Equal]*)*)
(*(*SKpara[A,B,vec] is a function to generate the Slater-Koster (SK) parameter describing the hopping integral from atomic orbital B to orbital A connected by vecter vec.*)*)
(*(*Input*)*)
(*(*A,B: atomic orbital type, such as "s","p_x","d_x^2-y^2",etc *)*)
(*(*vec: three-dimensional vector *)*)
(*(*Output*)*)
(*(*Symbolic variable with standard SK parameters Vss\[Sigma],Vpp\[Pi],etc *)*)
(*(*Reference: https://en.wikipedia.org/wiki/Tight_binding*)*)
(*(*Last update: 20210310*)*)
(**)
(*SKpara::orb="Invaid input(s) with `1`, `2`, and/or `3`! \ Function SKpara[typeA,typeB,vec] accepts typeA/B as one of the strings {s,p_x,p_y,p_z,d_yz,d_zx,d_yz,d_xy,\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\),d_3\!\(\*SuperscriptBox[\(z\), \(2\)]\)-\!\(\*SuperscriptBox[\(r\), \(2\)]\)} and vec as a three-dimensional vector {l,m,n}.";*)
(*SKpara[typeA_,typeB_,vec_]:=Module[{proj=ConstantArray[0,3],plist={"p_x","p_y","p_z"},dlist={"d_yz","d_zx","d_xy","\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\)","d_3\!\(\*SuperscriptBox[\(z\), \(2\)]\)-\!\(\*SuperscriptBox[\(r\), \(2\)]\)"},pos,dlab,double,para},*)
(*If[!MemberQ[Flatten[{"s",plist,dlist}],typeA]||!MemberQ[Flatten[{"s",plist,dlist}],typeB]||!VectorQ[vec],Message[SKpara::orb,typeA,typeB,vec];Abort[]];proj=vec/Norm[vec];*)
(*pos[lis_,ele_]:=(Flatten@Position[lis,ele])[[1]];*)
(*comp[lis_,ele_]:=proj[[pos[lis,ele]]];*)
(*Table[dlab[j]=RotateLeft[Range[3],pos[dlist,j]][[;;2]],{j,dlist[[;;3]]}];*)
(*If[typeA=="s"&&typeB=="s",para=Vss\[Sigma]];*)
(*If[typeA=="s"&&MemberQ[plist,typeB],para=Vsp\[Sigma]*comp[plist,typeB]];*)
(*If[typeB=="s"&&MemberQ[plist,typeA],para=-Vsp\[Sigma]*comp[plist,typeA]];*)
(*If[typeA=="s"&&MemberQ[dlist,typeB],para=If[MemberQ[dlist[[;;3]],typeB],(Sqrt[3]Vsd\[Sigma]*proj[[#1]]*proj[[#2]])&@@RotateLeft[Range[3],pos[dlist,typeB]],If[typeB=="\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\)",Sqrt[3]/2 Vsd\[Sigma](proj[[1]]^2-proj[[2]]^2),Vsds(proj[[3]]^2-(proj[[1]]^2+proj[[2]]^2)/2)]]];*)
(*If[typeB=="s"&&MemberQ[dlist,typeA],para=If[MemberQ[dlist[[;;3]],typeA],(Sqrt[3]Vsd\[Sigma]*proj[[#1]]*proj[[#2]])&@@RotateLeft[Range[3],pos[dlist,typeA]],If[typeA=="\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\)",Sqrt[3]/2 Vsd\[Sigma](proj[[1]]^2-proj[[2]]^2),Vsds(proj[[3]]^2-(proj[[1]]^2+proj[[2]]^2)/2)]]];*)
(*If[MemberQ[plist,typeA]&&MemberQ[plist,typeB],para=If[typeA==typeB,Vpp\[Sigma]*comp[plist,typeA]^2+Vpp\[Pi]*(1-comp[plist,typeA]^2),(Vpp\[Sigma]-Vpp\[Pi])*comp[plist,typeA]*comp[plist,typeB]]];*)
(*If[MemberQ[plist,typeA]&&MemberQ[dlist,typeB],para=If[pos[plist,typeA]==pos[dlist,typeB],(Sqrt[3]Vpd\[Sigma]-2Vpd\[Pi])*comp[plist,typeA]*proj[[#1]]*proj[[#2]]&@@RotateLeft[Range[3],pos[dlist,typeB]],If[MemberQ[dlist[[;;3]],typeB],(Sqrt[3]Vpd\[Sigma]*comp[plist,typeA]^2*proj[[#]]+Vpd\[Pi]*proj[[#]]*(1-2comp[plist,typeA]^2))&@((RotateRight[{#,RotateLeft[Range[3],#-1][[3]],RotateLeft[Range[3],#-1][[2]]},#-1]&@pos[plist,typeA])[[pos[dlist,typeB]]]),Switch[typeB,"\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\)",Sqrt[3]/2 Vpd\[Sigma]*comp[plist,typeA]*(proj[[1]]^2-proj[[2]]^2)-Vpd\[Pi]*comp[plist,typeA](proj[[1]]^2-proj[[2]]^2)+Vpd\[Pi]*Switch[typeA,"p_x",proj[[1]],"p_y",-proj[[2]],"p_z",0],"d_3\!\(\*SuperscriptBox[\(z\), \(2\)]\)-\!\(\*SuperscriptBox[\(r\), \(2\)]\)",Vpd\[Sigma]*comp[plist,typeA](proj[[3]]^2-(proj[[1]]^2+proj[[2]]^2)/2)-Sqrt[3]Vpd\[Pi]*comp[plist,typeA]*proj[[3]]^2+Sqrt[3]Vpd\[Pi]*If[typeA=="p_z",proj[[3]],0]]]]];*)
(*If[MemberQ[plist,typeB]&&MemberQ[dlist,typeA],para=If[pos[plist,typeB]==pos[dlist,typeA],-(Sqrt[3]Vpd\[Sigma]-2Vpd\[Pi])*comp[plist,typeB]*proj[[#1]]*proj[[#2]]&@@RotateLeft[Range[3],pos[dlist,typeA]],If[MemberQ[dlist[[;;3]],typeA],-(Sqrt[3]Vpd\[Sigma]*comp[plist,typeB]^2*proj[[#]]+Vpd\[Pi]*proj[[#]]*(1-2comp[plist,typeB]^2))&@((RotateRight[{#,RotateLeft[Range[3],#-1][[3]],RotateLeft[Range[3],#-1][[2]]},#-1]&@pos[plist,typeB])[[pos[dlist,typeA]]]),Switch[typeA,"\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\)",-(Sqrt[3]/2)Vpd\[Sigma]*comp[plist,typeB]*(proj[[1]]^2-proj[[2]]^2)+Vpd\[Pi]*comp[plist,typeB](proj[[1]]^2-proj[[2]]^2)-Vpd\[Pi]*Switch[typeB,"p_x",proj[[1]],"p_y",-proj[[2]],"p_z",0],"d_3\!\(\*SuperscriptBox[\(z\), \(2\)]\)-\!\(\*SuperscriptBox[\(r\), \(2\)]\)",-Vpd\[Sigma]*comp[plist,typeB](proj[[3]]^2-(proj[[1]]^2+proj[[2]]^2)/2)+Sqrt[3]Vpd\[Pi]*comp[plist,typeB]*proj[[3]]^2-Sqrt[3]Vpd\[Pi]*If[typeB=="p_z",proj[[3]],0]]]]];*)
(*If[MemberQ[dlist,typeA]&&MemberQ[dlist,typeB],para=If[typeA==typeB,Switch[MemberQ[dlist[[;;3]],typeA],True,(3Vdd\[Sigma]*proj[[#1]]^2*proj[[#2]]^2+Vdd\[Pi](proj[[#1]]^2+proj[[#2]]^2-4proj[[#1]]^2*proj[[#2]]^2)+Vdd\[Delta](proj[[#3]]^2+proj[[#1]]^2*proj[[#2]]^2))&@@RotateLeft[Range[3],pos[dlist,typeA]],False,If[typeA=="\!\(\*SuperscriptBox[\(d_x\), \(2\)]\)-\!\(\*SuperscriptBox[\(y\), \(2\)]\)",3/4 Vdd\[Sigma] (proj[[1]]^2-proj[[2]]^2)^2+Vdd\[Pi](proj[[1]]^2+proj[[2]]^2-(proj[[1]]^2-proj[[2]]^2)^2)+Vdd\[Delta](proj[[3]]^2+(proj[[1]]^2+proj[[2]]^2)^2/4),Vdd\[Sigma] (proj[[3]]^2-(proj[[1]]^2+proj[[2]]^2)/2)^2+3Vdd\[Pi]*proj[[3]]^2 (proj[[1]]^2+proj[[2]]^2)+3/4 Vdd\[Delta] (proj[[1]]^2+proj[[2]]^2)^2]],If[MemberQ[dlist[[;;3]],typeA]&&MemberQ[dlist[[;;3]],typeB],double=Ordering[SequenceCount[Flatten[{dlab[typeA],dlab[typeB]}],{#}]&/@Range[3],-1];(3Vdd\[Sigma]*proj[[#1]]*proj[[#2]]*proj[[#3]]^2+Vdd\[Pi]*proj[[#1]]*proj[[#2]]*(1-4proj[[#3]]^2)+Vdd\[Delta]*proj[[#1]]*proj[[#2]](proj[[#3]]^2-1))&@@Flatten[{Complement[Range[3],double],double}],If[MemberQ[dlist[[4;;]],typeA]&&MemberQ[dlist[[4;;]],typeB],Sqrt[3]Vdd\[Sigma]*(proj[[1]]^2-proj[[2]]^2)(proj[[3]]^2-(proj[[1]]^2+proj[[2]]^2)/2)/2+Sqrt[3]Vdd\[Pi]*proj[[3]]^2 (proj[[2]]^2-proj[[1]]^2)+Sqrt[3]Vdd\[Delta](1+proj[[3]]^2)(proj[[1]]^2-proj[[2]]^2)/4,If[MemberQ[dlist[[;;3]],typeA],(3/2 Vdd\[Sigma]*proj[[#1]]*proj[[#2]](proj[[1]]^2-proj[[2]]^2)-2Vdd\[Pi]*proj[[#1]]*proj[[#2]](proj[[1]]^2-proj[[2]]^2)+Vdd\[Pi]*proj[[#1]]*proj[[#2]]*Switch[typeA,"d_yz",-1,"d_zx",1,"d_xy",0]+Vdd\[Delta]*proj[[#1]]*proj[[#2]](proj[[1]]^2-proj[[2]]^2)/2+Vdd\[Delta]*proj[[#1]]*proj[[#2]]*Switch[typeA,"d_yz",1,"d_zx",-1,"d_xy",0])&@@dlab[typeA],(3/2 Vdd\[Sigma]*proj[[#1]]*proj[[#2]](proj[[1]]^2-proj[[2]]^2)-2Vdd\[Pi]*proj[[#1]]*proj[[#2]](proj[[1]]^2-proj[[2]]^2)+Vdd\[Pi]*proj[[#1]]*proj[[#2]]*Switch[typeB,"d_yz",-1,"d_zx",1,"d_xy",0]+Vdd\[Delta]*proj[[#1]]*proj[[#2]](proj[[1]]^2-proj[[2]]^2)/2+Vdd\[Delta]*proj[[#1]]*proj[[#2]]*Switch[typeB,"d_yz",1,"d_zx",-1,"d_xy",0])&@@dlab[typeB]]]]]];*)
(*para*)
(*]*)
